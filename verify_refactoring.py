#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Verification script for UnifyVision refactoring
Tests that all modules can be imported and basic functionality works
"""

print("üîç Verifying UnifyVision refactoring...")
print("=" * 60)

# Test 1: Import all modules
print("\n1Ô∏è‚É£  Testing module imports...")
try:
    from src import (
        config,
        Config,
        logger,
        setup_logger,
        ScreenCapture,
        GridSystem,
        OpenAIClient,
        Planner,
        ActionPlan,
        ActionExecutor,
        PlanExecutor,
        UnifyVisionError,
        ConfigurationError,
        ScreenCaptureError,
        GridSystemError,
        OpenAIClientError,
        PlanningError,
        ActionExecutionError,
        ElementNotFoundError,
        InvalidPlanError,
        ScreenChangeDetectionError
    )
    print("   ‚úÖ All modules imported successfully")
except ImportError as e:
    print(f"   ‚ùå Import failed: {e}")
    exit(1)

# Test 2: Configuration
print("\n2Ô∏è‚É£  Testing configuration...")
try:
    assert config.GRID_COLS == 32
    assert config.GRID_ROWS == 18
    assert config.GRID_COLS * config.GRID_ROWS == 576
    assert config.FAILSAFE_ENABLED == True
    print("   ‚úÖ Configuration loaded correctly")
except AssertionError as e:
    print(f"   ‚ùå Configuration error: {e}")
    exit(1)

# Test 3: Logger
print("\n3Ô∏è‚É£  Testing logger...")
try:
    from src.logger import log_capture, log_grid, log_click
    logger.info("Test log message")
    log_capture("Test capture message")
    print("   ‚úÖ Logger working correctly")
except Exception as e:
    print(f"   ‚ùå Logger error: {e}")
    exit(1)

# Test 4: ActionPlan validation
print("\n4Ô∏è‚É£  Testing ActionPlan validation...")
try:
    # Valid plan
    valid_plan = ActionPlan([
        {"action": "click", "target": "button"},
        {"action": "type", "text": "hello"},
        {"action": "press", "key": "enter"},
        {"action": "wait", "seconds": 1}
    ])
    assert len(valid_plan) == 4
    print("   ‚úÖ Valid plan accepted")

    # Invalid plan (should raise exception)
    try:
        invalid_plan = ActionPlan([])
        print("   ‚ùå Empty plan should have been rejected")
        exit(1)
    except InvalidPlanError:
        print("   ‚úÖ Invalid plan rejected correctly")

except Exception as e:
    print(f"   ‚ùå ActionPlan error: {e}")
    exit(1)

# Test 5: Exception hierarchy
print("\n5Ô∏è‚É£  Testing exception hierarchy...")
try:
    assert issubclass(ConfigurationError, UnifyVisionError)
    assert issubclass(ScreenCaptureError, UnifyVisionError)
    assert issubclass(PlanningError, UnifyVisionError)
    assert issubclass(InvalidPlanError, PlanningError)
    print("   ‚úÖ Exception hierarchy correct")
except AssertionError as e:
    print(f"   ‚ùå Exception hierarchy error: {e}")
    exit(1)

# Test 6: Module structure
print("\n6Ô∏è‚É£  Testing module structure...")
try:
    # Check that classes have expected methods
    assert hasattr(ScreenCapture, 'capture_screen')
    assert hasattr(ScreenCapture, 'get_display_scale')
    assert hasattr(GridSystem, 'draw_grid_on_image')
    assert hasattr(Planner, 'generate_plan')
    assert hasattr(ActionExecutor, 'execute_click')
    assert hasattr(ActionExecutor, 'execute_type')
    assert hasattr(PlanExecutor, 'execute_plan')
    print("   ‚úÖ Module structure correct")
except AssertionError as e:
    print(f"   ‚ùå Module structure error: {e}")
    exit(1)

# Final summary
print("\n" + "=" * 60)
print("‚úÖ All verification tests passed!")
print("=" * 60)
print("\nüìã Summary:")
print("   ‚Ä¢ Modular architecture: ‚úÖ")
print("   ‚Ä¢ Configuration system: ‚úÖ")
print("   ‚Ä¢ Logging system: ‚úÖ")
print("   ‚Ä¢ Exception handling: ‚úÖ")
print("   ‚Ä¢ Plan validation: ‚úÖ")
print("   ‚Ä¢ Module structure: ‚úÖ")
print("\nüéâ Refactoring successful!")
print("\nüí° Next steps:")
print("   1. Run: python3 main.py")
print("   2. Test with a simple task")
print("   3. Verify all functionality works as expected")
print()
